{"version":3,"sources":["Todo.js","TodoList.js","App.js","actions.js","constants.js","serviceWorker.js","reducers.js","todosData.js","index.js"],"names":["Todo","props","this","text","id","status","background","handleChange","changeContent","changeContentBack","itemClass","idToUse","wrapIdToUse","className","style","name","type","checked","onChange","onClick","tabIndex","React","Component","TodoList","todoStored","map","todo","key","App","main","document","getElementById","mainEdit","classList","remove","add","console","log","e","todos","textfield","backColor","onTextChange","onChangeColor","onAddTodo","onHandleCheckChange","onHandleDeleteItems","numberOfItems","filter","length","display","alignItems","justifyContent","onSubmit","value","placeholder","connect","state","setArray","dispatch","event","payload","target","preventDefault","handleCheckChange","Boolean","window","location","hostname","match","initialStateArray","logger","createLogger","rootReducer","combineReducers","action","newTodo","Date","now","concat","updatedItems","itemsToBeDeleted","store","createStore","applyMiddleware","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.85714028.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// class EditTodo extends React.Component {\r\n//     constructor(props){\r\n//         super(props)\r\n//         this.state = {\r\n//             textfield: '',\r\n//             backColor: ''\r\n//           }\r\n//     }\r\n      \r\n//     editTodo =(event) => {\r\n//         event.preventDefault()\r\n\r\n\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <form className=\"todoform\" onSubmit={this.addTodo}>\r\n        \r\n//             <input onChange={this.textChange} className=\"textInput\" type=\"text\" placeholder=\"Add New Item\" value={} name=\"textfield\"/>\r\n\r\n//             <select name=\"backColor\" onChange={this.changeColor}>\r\n//             <option>Choose a color</option>\r\n//             <option value=\"green\">Green</option>\r\n//             <option value=\"pink\">Pink</option>\r\n//             <option value=\"brown\">Brown</option>\r\n//             <option value=\"purple\">Purple</option>\r\n//             <option value=\"blue\">Blue</option>\r\n//             </select>\r\n\r\n//             <button onClick={this.editTodo}>Save</button>\r\n\r\n//         </form>\r\n\r\n//         )\r\n//     }\r\n// }\r\n\r\nclass Todo extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n    \r\n    \r\n    render() {\r\n        const { text, id, status, background, handleChange, changeContent, changeContentBack } = this.props\r\n        let itemClass = \"tick \" + (status ? \"checked\" : null) \r\n        let idToUse = `id${id}`\r\n        let wrapIdToUse = `wrapId${id}`\r\n        return (\r\n            <div className=\"todoItem\" style={{background: background}}>\r\n                <div className={itemClass}>\r\n                    <input name={`todoitem${id}`} \r\n                    type=\"checkbox\" \r\n                    checked={status}\r\n                    onChange={() => handleChange(id)}\r\n                    />\r\n                </div>\r\n                <div className=\"label\">\r\n                    <p onClick={() => changeContent(idToUse, wrapIdToUse)} className=\"editShow\" id={idToUse}>{text}</p>\r\n                    <div onClick={() => changeContentBack(idToUse, wrapIdToUse)} tabIndex=\"-1\" className=\"toEditNoShow\" id={wrapIdToUse}>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n    }    \r\n}    \r\n\r\n\r\n\r\n\r\nexport default Todo","import React from 'react'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = ({ todoStored , handleChange , changeContent, changeContentBack}) => {\r\n    return (\r\n        <div className=\"todoWrapper\">\r\n            {\r\n                todoStored.map((todo) => {\r\n                    return (\r\n                        <Todo \r\n                            key={todo.id} \r\n                            text={todo.text} \r\n                            id={todo.id} \r\n                            status={todo.status} \r\n                            background={todo.background} \r\n                            handleChange={handleChange}  \r\n                            changeContent={changeContent}              \r\n                            changeContentBack={changeContentBack}              \r\n                        />\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default TodoList","import React from 'react';\n//connect works with provider to pass props i.e state and action\nimport { connect } from 'react-redux';\nimport TodoList from \"./TodoList\";\nimport './App.css';\n\n//no state here so no need for importing the todostore here\n// import {todoStore} from './todosData'\n\n//you import all your actions here\nimport { setTextField, setBackColor, addToArray, handleCheckChange, handleDeleteItem } from './actions'\n\n//we use the connect function to use provider to pass props which are the state and actions to our app\n\n//mapstatetoprope is a function that takes in the sttae and returns an object basically containing state with each state defined with the state the reducer taht works on them give\nconst mapStateToProps = state => {\n  return {\n    todos: state.setArray.todos,\n    textfield: state.setArray.textfield,\n    backColor: state.setArray.backColor\n  }\n}\n\n//mapdispatchtoprops, here we dispatch our actions, it takes in the dispatch params and returns an object\n//the property of the object is thate name you'll like to call your action which is diffferent from what you've called it in yuor action or reducer\n//the value of each property is a function as defined in your actions. you can also pass arguments here if the function in your reducer needs an argument,\n//you'll define this argument in your action under payload which you'll now pass to the reducer \nconst mapDispatchToProps = dispatch => {\n  return {\n    onTextChange: (event) => dispatch(setTextField(event.target.value)),\n    onChangeColor: (event) => dispatch(setBackColor(event.target.value)),\n    // onChangeColor: (event) => {\n    //   const { name , value } = event.target\n    //   dispatch(setBackColor( { [name] : value }))\n    // },\n    onAddTodo: (event) => dispatch(addToArray(event.preventDefault())),\n    onHandleCheckChange: (id) => dispatch(handleCheckChange(id)),\n    onHandleDeleteItems: () => dispatch(handleDeleteItem())\n  }\n}\n\nclass App extends React.Component {\n  //no more constructor\n  // constructor() {\n  //   super()\n  //   this.state = {\n  //     todos: todoStore,\n  //     textfield: '',\n  //     backColor: ''\n  //   }\n  // }\n  \n  // handleChange = (id) => {\n  //   var updatedItems = this.state.todos.map(todo => {\n  //       if (id === todo.id)\n  //         todo.status = !todo.status;\n        \n  //       return todo;\n  //     });\n      \n  //     this.setState({\n  //       todos: updatedItems\n  //     });   \n  // }\n  \n  \n  // addTodo = (event) => {\n  //   event.preventDefault();\n  //   if (this.state.textfield.length !== 0) {\n  //     var newTodo = {\n  //         id: Date.now(),\n  //         text: this.state.textfield,\n  //         status: false,\n  //         background: this.state.backColor,\n  //       };\n  //     this.setState((prevState) => ({\n  //       todos: prevState.todos.concat(newTodo),\n  //       textfield: \"\"\n  //     })); \n  //   }\n  // }\n  \n  // textChange = (event) => {\n  //   this.setState({ textfield: event.target.value })\n  // }\n  \n  // changeColor = (event) => {\n  //   const { name , value } = event.target\n  //   this.setState( { [name] : value })\n  // }\n\n  // deleteItems = () => {\n  //   var itemsToBeDeleted = this.state.todos.filter(todo => {\n  //     return todo.status === false\n  //   })\n    \n  //   this.setState({\n  //     todos: [].concat(itemsToBeDeleted)\n  //   })\n  // }\n\n  changeContent =(idToUse, wrapIdToUse) => {\n    const main = document.getElementById(idToUse)\n    const mainEdit = document.getElementById(wrapIdToUse)\n    main.classList.remove(\"editShow\")\n    main.classList.add(\"editNoShow\")\n    mainEdit.classList.remove(\"toEditNoShow\")\n    mainEdit.classList.add(\"toEditShow\")\n    console.log(\"clicked\")\n  }\n\n  changeContentBack =(e, idToUse, wrapIdToUse) => {\n    // const main = document.getElementById(idToUse)\n    // const mainEdit = document.getElementById(wrapIdToUse)\n    // main.classList.remove(\"editNoShow\")\n    // main.classList.add(\"editShow\")\n    // mainEdit.classList.remove(\"toEditShow\")\n    // mainEdit.classList.add(\"toEditNoShow\")\n    // console.log(\"clickedd\")\n\n\n  //   document.getElementById(wrapIdToUse).onfocus = function() {\n  //     alert('focused');\n  //  }\n  //  document.getElementById(wrapIdToUse).onblur = function() {\n  //     alert('blur');\n  //  }\n  }\n\n\n  render() {\n    const { todos, textfield, backColor, onTextChange, onChangeColor, onAddTodo, onHandleCheckChange, onHandleDeleteItems} = this.props\n    let itemsToDelete = todos.filter(todo=> {\n      return todo.status === true\n    })\n\n    let numberOfItems = itemsToDelete.length\n    return (\n      <div className=\"Wrapper\">\n\n        <div style = {{display:\"flex\", alignItems:\"center\", justifyContent:\"space-between\"}}>\n\n          <p>React Todo List </p>\n          <span onClick={onHandleDeleteItems}> {numberOfItems ? \"Clear Completed Items\" + \"(\" + numberOfItems + \") \" : null} </span>\n\n        </div>\n\n        <div className=\"formWrap\">\n\n        {todos.length === 0 ? <div> You do not have any item on your to-do list. </div> : \n\n          <TodoList todoStored={todos} changeContent={this.changeContent} changeContentBack={this.changeContentBack} handleChange={onHandleCheckChange}/>\n        \n        }\n\n          <form className=\"todoform\" onSubmit={onAddTodo}>\n\n            <input onChange={onTextChange} value={textfield} className=\"textInput\" type=\"text\" placeholder=\"Add New Item\" name=\"textfield\"/>\n\n            <select value={backColor} name=\"backColor\" onChange={onChangeColor}>\n              <option>Choose a color</option>\n              <option value=\"green\">Green</option>\n              <option value=\"pink\">Pink</option>\n              <option value=\"brown\">Brown</option>\n              <option value=\"purple\">Purple</option>\n              <option value=\"blue\">Blue</option>\n            </select>\n\n            <button>Add</button>\n\n          </form>\n\n        </div>\n\n      </div>\n    )\n  }\n}\n\n//don't forget to connect to your app. no pun intended.\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","//it is industry standard to use our action types as constants, so we have a folder for that which we then import.\r\nimport {\r\n    CHANGE_TEXT_FIELD,\r\n    UPDATE_TODO_ARRAY,\r\n    SET_BACKGROUND_COLOR,\r\n    HANDLE_CHANGE,\r\n    DELETE_TODO\r\n} from './constants.js';\r\n\r\n\r\n//can you see how we are passing our arguments from the main app page as props here and putting it in the payload.\r\n//you can put other name/value pairs in your action function object but type is the koko\r\nexport const setTextField = (text) => {\r\n    return ({\r\n        type: CHANGE_TEXT_FIELD,\r\n        payload: text\r\n    })\r\n}\r\n\r\nexport const addToArray = () => {\r\nreturn ({\r\n        type: UPDATE_TODO_ARRAY,\r\n    })\r\n}\r\n\r\nexport const setBackColor = (text) => {\r\n    return ({\r\n        type: SET_BACKGROUND_COLOR,\r\n        payload: text\r\n\r\n    })\r\n}\r\n\r\nexport const handleCheckChange = (id) => {\r\n    return({\r\n        type: HANDLE_CHANGE,\r\n        payload: id\r\n    })\r\n}\r\n\r\nexport const handleDeleteItem = () => {\r\n    return ({\r\n        type: DELETE_TODO\r\n    })\r\n}","export const CHANGE_TEXT_FIELD = 'CHANGE_TEXT_FIELD';\r\n\r\nexport const UPDATE_TODO_ARRAY = 'UPDATE_TODO_ARRAY';\r\n\r\nexport const SET_BACKGROUND_COLOR = 'SET_BACKGROUND_COLOR';\r\n\r\nexport const HANDLE_CHANGE = 'HANDLE_CHANGE'\r\n\r\nexport const DELETE_TODO = 'DELETE_TODO'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//this is where the magic happens.\r\n//import the constants here as well\r\nimport {\r\n    CHANGE_TEXT_FIELD,\r\n    UPDATE_TODO_ARRAY,\r\n    SET_BACKGROUND_COLOR,\r\n    HANDLE_CHANGE,\r\n    DELETE_TODO\r\n} from './constants.js';\r\n\r\n//we need the store here so you have to import it here\r\nimport {todoStore} from './todosData'\r\n\r\n\r\n//because the reducer takes in state and action, we have to declare our state\r\n//usually,  we hjave one object per state property but if you have a reducer that uses two or more of your different states, it wouldn't make sense to seperate them\r\n//also, if you have two reducers using the same state property, it also wouldn't make any sense to seperate them\r\nconst initialStateArray = {\r\n    todos: todoStore,\r\n    textfield: '',\r\n    backColor: ''\r\n}\r\n\r\n//here we have quite a couple of action types but since they perfrom their operations on the same state, we can put them in one reducer and use action.type to sepearet them. \r\nexport const setArray = (state=initialStateArray, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_TEXT_FIELD:\r\n            return ({\r\n                ...state,\r\n                textfield: action.payload\r\n            })\r\n        case SET_BACKGROUND_COLOR:\r\n            return ({\r\n                ...state,\r\n                backColor: action.payload\r\n            })\r\n        case UPDATE_TODO_ARRAY:\r\n            //as you can see here, these are your normal functions with one or two differences sha\r\n            if (state.textfield.length !== 0) {\r\n                var newTodo = {\r\n                    id: Date.now(),\r\n                    text: state.textfield,\r\n                    status: false,\r\n                    background: state.backColor,\r\n                  }\r\n            } else {\r\n                return state\r\n            }\r\n            return ({\r\n                ...state,\r\n                todos: state.todos.concat(newTodo),\r\n                textfield: \"\"\r\n            });\r\n        case HANDLE_CHANGE:\r\n            //see how we used action.payload to pass in our (id) parameter\r\n            var updatedItems = state.todos.map(todo => {\r\n                if (action.payload === todo.id)\r\n                  todo.status = !todo.status;\r\n                return todo;\r\n              });\r\n            return ({\r\n                ...state,\r\n                todos: updatedItems\r\n            })\r\n        case DELETE_TODO:\r\n            var itemsToBeDeleted = state.todos.filter(todo => {\r\n                return todo.status === false\r\n            })\r\n            return ({\r\n                ...state,\r\n                todos: [].concat(itemsToBeDeleted)\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","export const todoStore = [\r\n    {\r\n      id: 1,\r\n      text: \"Todo Item1\",\r\n      status: false,\r\n      background: \"red\",\r\n    },\r\n  \r\n    {\r\n      id: 2,\r\n      text: \"Todo Item2\",\r\n      status: true,\r\n      background: \"blue\",\r\n    }\r\n]\r\n  ","//of course, you import your normal react stuff\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//we use provider to pass our states and dispatch our actions to all the components in our app\n//you import it from the react redux library\n//well, if your app only has one component, I'm not sure you need provider, you can just pass the props directly with App\nimport { Provider } from 'react-redux';\n\n//we use createstore to...create store\n//we use combine reducers to combine reducers when we have more than one reducer\n//midddleware is for third party apps like seeing the state at every instance or for async functions\nimport { createStore,  combineReducers, applyMiddleware } from 'redux';\n\n//create logger is a type of middle, we use redux thunk middleware for async funct\nimport { createLogger } from 'redux-logger';\n// import Trial from './Trial/trial.js'\n// import { handleTheCount, sayMyName } from './Trial/reducers';\n\n//this is where you umport your reducers from your reducer folder\nimport { setArray } from './reducers';\n\n//instantiate the logger middleware\nconst logger = createLogger();\n\n//this is how you combine all your reducers into a singular rootreducer\nconst rootReducer = combineReducers({ setArray })\n// const rootReducer = combineReducers({ handleTheCount, sayMyName })\n\n//you createSore with this function and bind it to a store variable which you will be passing around\n//the function takes arguments like what we have below\nconst store = createStore(rootReducer, applyMiddleware(logger))\n\n// const store = createStore(rootReducer)\n\n// const store = createStore(rootReducer)\n\n\n//speaks for itself\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}